// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/prisma-typegraphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  username String @unique
  email    String @unique
  password String

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  recipe         Recipe[]
  currentSavings CurrentSaving[]
  wishlistItems  WishlistItem[]
  expenses       Expense[]
  categories     Category[]
}

model Recipe {
  id            String @id @default(cuid())
  userId        String
  user          User   @relation(fields: [userId], references: [id])
  title         String
  description   String
  rating        Int?
  savedPosition Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CurrentSaving {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  value Decimal
  date  DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WishlistItem {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  itemName         String
  priceInThousands Decimal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name        String
  value       Decimal
  rating      Int?
  date        DateTime? @default(now())
  description String?

  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  expenses Expense[]

  name    String
  bgColor String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
